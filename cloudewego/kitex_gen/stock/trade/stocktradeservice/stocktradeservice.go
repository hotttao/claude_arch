// Code generated by Kitex v0.15.0. DO NOT EDIT.

package stocktradeservice

import (
	trade "cloudewego/kitex_gen/stock/trade"
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetStockTradeData": kitex.NewMethodInfo(
		getStockTradeDataHandler,
		newGetStockTradeDataArgs,
		newGetStockTradeDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StreamTradeData": kitex.NewMethodInfo(
		streamTradeDataHandler,
		newStreamTradeDataArgs,
		newStreamTradeDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	stockTradeServiceServiceInfo                = NewServiceInfo()
	stockTradeServiceServiceInfoForClient       = NewServiceInfoForClient()
	stockTradeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return stockTradeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return stockTradeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return stockTradeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StockTradeService"
	handlerType := (*trade.StockTradeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "stock",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.15.0",
		Extra:           extra,
	}
	return svcInfo
}

func getStockTradeDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(trade.GetStockTradeDataReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(trade.StockTradeService).GetStockTradeData(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetStockTradeDataArgs:
		success, err := handler.(trade.StockTradeService).GetStockTradeData(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetStockTradeDataResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetStockTradeDataArgs() interface{} {
	return &GetStockTradeDataArgs{}
}

func newGetStockTradeDataResult() interface{} {
	return &GetStockTradeDataResult{}
}

type GetStockTradeDataArgs struct {
	Req *trade.GetStockTradeDataReq
}

func (p *GetStockTradeDataArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetStockTradeDataArgs) Unmarshal(in []byte) error {
	msg := new(trade.GetStockTradeDataReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetStockTradeDataArgs_Req_DEFAULT *trade.GetStockTradeDataReq

func (p *GetStockTradeDataArgs) GetReq() *trade.GetStockTradeDataReq {
	if !p.IsSetReq() {
		return GetStockTradeDataArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetStockTradeDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetStockTradeDataArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetStockTradeDataResult struct {
	Success *trade.GetStockTradeDataRes
}

var GetStockTradeDataResult_Success_DEFAULT *trade.GetStockTradeDataRes

func (p *GetStockTradeDataResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetStockTradeDataResult) Unmarshal(in []byte) error {
	msg := new(trade.GetStockTradeDataRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetStockTradeDataResult) GetSuccess() *trade.GetStockTradeDataRes {
	if !p.IsSetSuccess() {
		return GetStockTradeDataResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetStockTradeDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*trade.GetStockTradeDataRes)
}

func (p *GetStockTradeDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetStockTradeDataResult) GetResult() interface{} {
	return p.Success
}

func streamTradeDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &stockTradeServiceStreamTradeDataServer{st}
	req := new(trade.StreamTradeDataReq)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(trade.StockTradeService).StreamTradeData(req, stream)
}

type stockTradeServiceStreamTradeDataClient struct {
	streaming.Stream
}

func (x *stockTradeServiceStreamTradeDataClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *stockTradeServiceStreamTradeDataClient) Recv() (*trade.StreamTradeDataRes, error) {
	m := new(trade.StreamTradeDataRes)
	return m, x.Stream.RecvMsg(m)
}

type stockTradeServiceStreamTradeDataServer struct {
	streaming.Stream
}

func (x *stockTradeServiceStreamTradeDataServer) Send(m *trade.StreamTradeDataRes) error {
	return x.Stream.SendMsg(m)
}

func newStreamTradeDataArgs() interface{} {
	return &StreamTradeDataArgs{}
}

func newStreamTradeDataResult() interface{} {
	return &StreamTradeDataResult{}
}

type StreamTradeDataArgs struct {
	Req *trade.StreamTradeDataReq
}

func (p *StreamTradeDataArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StreamTradeDataArgs) Unmarshal(in []byte) error {
	msg := new(trade.StreamTradeDataReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StreamTradeDataArgs_Req_DEFAULT *trade.StreamTradeDataReq

func (p *StreamTradeDataArgs) GetReq() *trade.StreamTradeDataReq {
	if !p.IsSetReq() {
		return StreamTradeDataArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StreamTradeDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StreamTradeDataArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StreamTradeDataResult struct {
	Success *trade.StreamTradeDataRes
}

var StreamTradeDataResult_Success_DEFAULT *trade.StreamTradeDataRes

func (p *StreamTradeDataResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StreamTradeDataResult) Unmarshal(in []byte) error {
	msg := new(trade.StreamTradeDataRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StreamTradeDataResult) GetSuccess() *trade.StreamTradeDataRes {
	if !p.IsSetSuccess() {
		return StreamTradeDataResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StreamTradeDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*trade.StreamTradeDataRes)
}

func (p *StreamTradeDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StreamTradeDataResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetStockTradeData(ctx context.Context, Req *trade.GetStockTradeDataReq) (r *trade.GetStockTradeDataRes, err error) {
	var _args GetStockTradeDataArgs
	_args.Req = Req
	var _result GetStockTradeDataResult
	if err = p.c.Call(ctx, "GetStockTradeData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamTradeData(ctx context.Context, req *trade.StreamTradeDataReq) (StockTradeService_StreamTradeDataClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "StreamTradeData", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &stockTradeServiceStreamTradeDataClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}
