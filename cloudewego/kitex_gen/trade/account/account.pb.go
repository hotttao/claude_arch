// Code generated by Kitex v0.15.0. DO NOT EDIT.

package account

import (
	"context"

	"github.com/cloudwego/prutal"
)

// 查询持仓请求
type QueryPositionsRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"` // 账户ID
	Symbol    string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`         // 股票代码（可选，不填则查询所有）
}

func (x *QueryPositionsRequest) Reset() { *x = QueryPositionsRequest{} }

func (x *QueryPositionsRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *QueryPositionsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *QueryPositionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *QueryPositionsRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// 查询持仓响应
type QueryPositionsResponse struct {
	Positions []*Position `protobuf:"bytes,1,rep,name=positions" json:"positions,omitempty"` // 持仓列表
}

func (x *QueryPositionsResponse) Reset() { *x = QueryPositionsResponse{} }

func (x *QueryPositionsResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *QueryPositionsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *QueryPositionsResponse) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// 持仓信息
type Position struct {
	Symbol       string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`                 // 股票代码
	Quantity     float64 `protobuf:"fixed64,2,opt,name=quantity" json:"quantity,omitempty"`           // 持仓数量
	AvgCost      float64 `protobuf:"fixed64,3,opt,name=avg_cost" json:"avg_cost,omitempty"`           // 平均成本
	MarketValue  float64 `protobuf:"fixed64,4,opt,name=market_value" json:"market_value,omitempty"`   // 市值
	CurrentPrice float64 `protobuf:"fixed64,7,opt,name=current_price" json:"current_price,omitempty"` // 当前价格
}

func (x *Position) Reset() { *x = Position{} }

func (x *Position) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Position) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Position) GetAvgCost() float64 {
	if x != nil {
		return x.AvgCost
	}
	return 0
}

func (x *Position) GetMarketValue() float64 {
	if x != nil {
		return x.MarketValue
	}
	return 0
}

func (x *Position) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

// 查询账户资金请求
type QueryAccountRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"` // 账户ID
}

func (x *QueryAccountRequest) Reset() { *x = QueryAccountRequest{} }

func (x *QueryAccountRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *QueryAccountRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *QueryAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// 查询账户资金响应
type QueryAccountResponse struct {
	Account *AccountInfo `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"` // 账户信息
}

func (x *QueryAccountResponse) Reset() { *x = QueryAccountResponse{} }

func (x *QueryAccountResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *QueryAccountResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *QueryAccountResponse) GetAccount() *AccountInfo {
	if x != nil {
		return x.Account
	}
	return nil
}

// 账户信息
type AccountInfo struct {
	AccountId   string  `protobuf:"bytes,1,opt,name=account_id" json:"account_id,omitempty"`       // 账户ID
	CashBalance float64 `protobuf:"fixed64,2,opt,name=cash_balance" json:"cash_balance,omitempty"` // 现金余额
}

func (x *AccountInfo) Reset() { *x = AccountInfo{} }

func (x *AccountInfo) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AccountInfo) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AccountInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountInfo) GetCashBalance() float64 {
	if x != nil {
		return x.CashBalance
	}
	return 0
}

type AccountService interface {
	QueryPositions(ctx context.Context, req *QueryPositionsRequest) (res *QueryPositionsResponse, err error)
	QueryAccount(ctx context.Context, req *QueryAccountRequest) (res *QueryAccountResponse, err error)
}
