// Code generated by Kitex v0.15.0. DO NOT EDIT.

package order

import (
	"context"
	"google.golang.org/protobuf/types/known/timestamppb"
	"strconv"

	"github.com/cloudwego/prutal"
)

// 订单方向
type OrderSide int32

const (
	OrderSide_BUY  OrderSide = 0 // 买入
	OrderSide_SELL OrderSide = 1 // 卖出
)

// Enum value maps for OrderSide.
var OrderSide_name = map[int32]string{
	0: "BUY",
	1: "SELL",
}

var OrderSide_value = map[string]int32{
	"BUY":  0,
	"SELL": 1,
}

func (x OrderSide) String() string {
	s, ok := OrderSide_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// 订单类型
type OrderType int32

const (
	OrderType_MARKET OrderType = 0 // 市价单
	OrderType_LIMIT  OrderType = 1 // 限价单
)

// Enum value maps for OrderType.
var OrderType_name = map[int32]string{
	0: "MARKET",
	1: "LIMIT",
}

var OrderType_value = map[string]int32{
	"MARKET": 0,
	"LIMIT":  1,
}

func (x OrderType) String() string {
	s, ok := OrderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// 订单状态
type OrderStatus int32

const (
	OrderStatus_PENDING   OrderStatus = 0 // 待处理
	OrderStatus_SUBMITTED OrderStatus = 1 // 已提交
	OrderStatus_PARTIAL   OrderStatus = 2 // 部分成交
	OrderStatus_FILLED    OrderStatus = 3 // 全部成交
	OrderStatus_CANCELED  OrderStatus = 4 // 已取消
	OrderStatus_REJECTED  OrderStatus = 5 // 被拒绝
	OrderStatus_EXPIRED   OrderStatus = 6 // 已过期
)

// Enum value maps for OrderStatus.
var OrderStatus_name = map[int32]string{
	0: "PENDING",
	1: "SUBMITTED",
	2: "PARTIAL",
	3: "FILLED",
	4: "CANCELED",
	5: "REJECTED",
	6: "EXPIRED",
}

var OrderStatus_value = map[string]int32{
	"PENDING":   0,
	"SUBMITTED": 1,
	"PARTIAL":   2,
	"FILLED":    3,
	"CANCELED":  4,
	"REJECTED":  5,
	"EXPIRED":   6,
}

func (x OrderStatus) String() string {
	s, ok := OrderStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// 下单请求
type OrderRequest struct {
	Symbol   string    `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`       // 股票代码
	Side     OrderSide `protobuf:"varint,2,opt,name=side" json:"side,omitempty"`          // 买卖方向
	Type     OrderType `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`          // 订单类型
	Quantity float64   `protobuf:"fixed64,4,opt,name=quantity" json:"quantity,omitempty"` // 数量
	Price    float64   `protobuf:"fixed64,5,opt,name=price" json:"price,omitempty"`       // 价格（市价单可不填）
}

func (x *OrderRequest) Reset() { *x = OrderRequest{} }

func (x *OrderRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *OrderRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *OrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderRequest) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_BUY
}

func (x *OrderRequest) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_MARKET
}

func (x *OrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// 下单响应
type OrderResponse struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id" json:"order_id,omitempty"` // 订单ID

	// string client_order_id = 2; // 客户端订单ID
	Status     OrderStatus            `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`          // 订单状态
	Message    string                 `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`         // 消息（成功或失败原因）
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time" json:"create_time,omitempty"` // 创建时间
}

func (x *OrderResponse) Reset() { *x = OrderResponse{} }

func (x *OrderResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *OrderResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *OrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderResponse) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_PENDING
}

func (x *OrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OrderResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type OrderService interface {
	PlaceOrder(ctx context.Context, req *OrderRequest) (res *OrderResponse, err error)
}
