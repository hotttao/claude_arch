// Code generated by Kitex v0.15.0. DO NOT EDIT.

package accountservice

import (
	account "cloudewego/kitex_gen/trade/account"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"QueryPositions": kitex.NewMethodInfo(
		queryPositionsHandler,
		newQueryPositionsArgs,
		newQueryPositionsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryAccount": kitex.NewMethodInfo(
		queryAccountHandler,
		newQueryAccountArgs,
		newQueryAccountResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	accountServiceServiceInfo                = NewServiceInfo()
	accountServiceServiceInfoForClient       = NewServiceInfoForClient()
	accountServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return accountServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return accountServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return accountServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AccountService"
	handlerType := (*account.AccountService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "trade",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.15.0",
		Extra:           extra,
	}
	return svcInfo
}

func queryPositionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(account.QueryPositionsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(account.AccountService).QueryPositions(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryPositionsArgs:
		success, err := handler.(account.AccountService).QueryPositions(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryPositionsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryPositionsArgs() interface{} {
	return &QueryPositionsArgs{}
}

func newQueryPositionsResult() interface{} {
	return &QueryPositionsResult{}
}

type QueryPositionsArgs struct {
	Req *account.QueryPositionsRequest
}

func (p *QueryPositionsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryPositionsArgs) Unmarshal(in []byte) error {
	msg := new(account.QueryPositionsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryPositionsArgs_Req_DEFAULT *account.QueryPositionsRequest

func (p *QueryPositionsArgs) GetReq() *account.QueryPositionsRequest {
	if !p.IsSetReq() {
		return QueryPositionsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryPositionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryPositionsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryPositionsResult struct {
	Success *account.QueryPositionsResponse
}

var QueryPositionsResult_Success_DEFAULT *account.QueryPositionsResponse

func (p *QueryPositionsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryPositionsResult) Unmarshal(in []byte) error {
	msg := new(account.QueryPositionsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryPositionsResult) GetSuccess() *account.QueryPositionsResponse {
	if !p.IsSetSuccess() {
		return QueryPositionsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryPositionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*account.QueryPositionsResponse)
}

func (p *QueryPositionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryPositionsResult) GetResult() interface{} {
	return p.Success
}

func queryAccountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(account.QueryAccountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(account.AccountService).QueryAccount(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryAccountArgs:
		success, err := handler.(account.AccountService).QueryAccount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryAccountResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryAccountArgs() interface{} {
	return &QueryAccountArgs{}
}

func newQueryAccountResult() interface{} {
	return &QueryAccountResult{}
}

type QueryAccountArgs struct {
	Req *account.QueryAccountRequest
}

func (p *QueryAccountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryAccountArgs) Unmarshal(in []byte) error {
	msg := new(account.QueryAccountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryAccountArgs_Req_DEFAULT *account.QueryAccountRequest

func (p *QueryAccountArgs) GetReq() *account.QueryAccountRequest {
	if !p.IsSetReq() {
		return QueryAccountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryAccountArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryAccountArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryAccountResult struct {
	Success *account.QueryAccountResponse
}

var QueryAccountResult_Success_DEFAULT *account.QueryAccountResponse

func (p *QueryAccountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryAccountResult) Unmarshal(in []byte) error {
	msg := new(account.QueryAccountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryAccountResult) GetSuccess() *account.QueryAccountResponse {
	if !p.IsSetSuccess() {
		return QueryAccountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryAccountResult) SetSuccess(x interface{}) {
	p.Success = x.(*account.QueryAccountResponse)
}

func (p *QueryAccountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryAccountResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) QueryPositions(ctx context.Context, Req *account.QueryPositionsRequest) (r *account.QueryPositionsResponse, err error) {
	var _args QueryPositionsArgs
	_args.Req = Req
	var _result QueryPositionsResult
	if err = p.c.Call(ctx, "QueryPositions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryAccount(ctx context.Context, Req *account.QueryAccountRequest) (r *account.QueryAccountResponse, err error) {
	var _args QueryAccountArgs
	_args.Req = Req
	var _result QueryAccountResult
	if err = p.c.Call(ctx, "QueryAccount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
