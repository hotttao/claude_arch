// Code generated by Kitex v0.15.0. DO NOT EDIT.

package trade

import (
	"context"

	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/prutal"
)

type StockTrade struct {
	Symbol   string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`       // 证券代码
	DataTime string  `protobuf:"bytes,2,opt,name=data_time" json:"data_time,omitempty"` // 交易所行情日期
	Open     float32 `protobuf:"fixed32,3,opt,name=open" json:"open,omitempty"`         // 开盘价
	Close    float32 `protobuf:"fixed32,4,opt,name=close" json:"close,omitempty"`       // 收盘价
}

func (x *StockTrade) Reset() { *x = StockTrade{} }

func (x *StockTrade) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *StockTrade) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *StockTrade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockTrade) GetDataTime() string {
	if x != nil {
		return x.DataTime
	}
	return ""
}

func (x *StockTrade) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *StockTrade) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

type GetStockTradeDataReq struct {
	DataDate string   `protobuf:"bytes,1,opt,name=data_date" json:"data_date,omitempty"`
	Days     int32    `protobuf:"varint,2,opt,name=days" json:"days,omitempty"`
	Symbols  []string `protobuf:"bytes,3,rep,name=symbols" json:"symbols,omitempty"`
}

func (x *GetStockTradeDataReq) Reset() { *x = GetStockTradeDataReq{} }

func (x *GetStockTradeDataReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetStockTradeDataReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetStockTradeDataReq) GetDataDate() string {
	if x != nil {
		return x.DataDate
	}
	return ""
}

func (x *GetStockTradeDataReq) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *GetStockTradeDataReq) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type GetStockTradeDataRes struct {
	TradeDates []string      `protobuf:"bytes,2,rep,name=trade_dates" json:"trade_dates,omitempty"`
	TradeData  []*StockTrade `protobuf:"bytes,1,rep,name=trade_data" json:"trade_data,omitempty"`
}

func (x *GetStockTradeDataRes) Reset() { *x = GetStockTradeDataRes{} }

func (x *GetStockTradeDataRes) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetStockTradeDataRes) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetStockTradeDataRes) GetTradeDates() []string {
	if x != nil {
		return x.TradeDates
	}
	return nil
}

func (x *GetStockTradeDataRes) GetTradeData() []*StockTrade {
	if x != nil {
		return x.TradeData
	}
	return nil
}

type StreamTradeDataReq struct {
	Symbols []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
}

func (x *StreamTradeDataReq) Reset() { *x = StreamTradeDataReq{} }

func (x *StreamTradeDataReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *StreamTradeDataReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *StreamTradeDataReq) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type StreamTradeDataRes struct {
	TradeData map[string]*StockTrade `protobuf:"bytes,1,rep,name=trade_data" json:"trade_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *StreamTradeDataRes) Reset() { *x = StreamTradeDataRes{} }

func (x *StreamTradeDataRes) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *StreamTradeDataRes) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *StreamTradeDataRes) GetTradeData() map[string]*StockTrade {
	if x != nil {
		return x.TradeData
	}
	return nil
}

type StockTradeService interface {
	GetStockTradeData(ctx context.Context, req *GetStockTradeDataReq) (res *GetStockTradeDataRes, err error)
	StreamTradeData(req *StreamTradeDataReq, stream StockTradeService_StreamTradeDataServer) (err error)
}

type StockTradeService_StreamTradeDataServer interface {
	streaming.Stream
	Send(*StreamTradeDataRes) error
}
